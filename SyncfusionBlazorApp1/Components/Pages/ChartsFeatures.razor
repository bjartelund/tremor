@page "/charts-features"
@rendermode InteractiveServer
@using Syncfusion.Blazor.Charts
@using Library
@inject ITremorService tremorService
<PageTitle>Charts</PageTitle>
<h2>Charts</h2>
<br/>
<div id = "ControlRegion">
 <SfChart Theme="Theme.Fluent" Title="Acceleration measurements" >
              <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
			  </ChartPrimaryXAxis>   
        <ChartPrimaryYAxis LabelFormat="{value}"></ChartPrimaryYAxis>
			  <ChartSeriesCollection>
            <ChartSeries DataSource="@AccelerationMeasurements" XName="XAxis" YName="XValue" Name="X" Type="ChartSeriesType.Scatter">
            </ChartSeries>  
                  <ChartSeries DataSource="@AccelerationMeasurements" XName="XAxis" YName="YValue" Name="Y" Type="ChartSeriesType.Scatter">
                  </ChartSeries>  
                  <ChartSeries DataSource="@AccelerationMeasurements" XName="XAxis" YName="ZValue" Name="Z" Type="ChartSeriesType.Scatter">
                  </ChartSeries>  
              </ChartSeriesCollection>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartZoomSettings EnableSelectionZooming="true"></ChartZoomSettings>
    </SfChart>
</div>
<br/>
<div>
  <h3>Selected Features:</h3>
    <ul class="ulstyle">
      <li class="list"> Chart Types - Scatter</li>
      <li class="list"> Zooming</li>
      <li class="list"> Tooltip</li>
      <li class="list"> Theme - Fluent</li>
    </ul>
</div>
<br/>
<style>
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }
    .list {
    float: left;
    line-height: 20px;
    margin: 10px;
    min-width: 200px;
    }
</style>
@code{
    public class ChartData
    {
        public DateTime XAxis { get; set; }
        public int XValue { get; set; }
        public int YValue { get; set; }
        public int ZValue { get; set; }
    }
    private List<ChartData> AccelerationMeasurements = new List<ChartData>();

    protected override async Task OnInitializedAsync()
    {
        AccelerationMeasurements = tremorService.TimedMeasurements.Select(ToChartData).ToList();
    }

    private static ChartData ToChartData(AccelerationMeasurement measurement)
    {
        return new ChartData() { XAxis = measurement.Timestamp, YValue = measurement.Acceleration.Y, XValue = measurement.Acceleration.X, ZValue = measurement.Acceleration.Z };
    }

}
